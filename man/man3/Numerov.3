.TH "Numerov" 3 "Thu Feb 16 2017" "pairinteraction" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Numerov \- \fBNumerov\fP's method\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Wavefunction\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBNumerov\fP (\fBQuantumDefect\fP const &qd)"
.br
.RI "\fIConstructor\&. \fP"
.ti -1c
.RI "std::vector< real_t > \fBaxis\fP () const "
.br
.RI "\fIx values \fP"
.ti -1c
.RI "std::vector< real_t > \fBintegrate\fP ()"
.br
.RI "\fIPerform the integration\&. \fP"
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static constexpr int \fBpower_kernel\fP (int power)"
.br
.RI "\fIPower kernel for matrix elements\&. \fP"
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "real_t const \fBdx\fP"
.br
.RI "\fIIntegration step size\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
\fBNumerov\fP's method\&. 

This class implements \fBNumerov\fP's method using a couple of helper functions\&. \fBNumerov\fP's method solves a differential equation of the form \[ y''(x) + g(x)y(x) = 0 \] The equation is solved by iteratively computing \[ y_{n+1} = \frac{\left( 2 + \frac{5 h^2}{6} g_n \right) y_n - \left( 1 + \frac{h^2}{12} g_{n-1} \right) y_{n-1}}{\left( 1 + \frac{h^2}{12} g_n \right)} \]
.PP
with $ y_n = y(x_n) $ and $ g_n = g(x_n) $\&. Clearly this equation needs two initial conditions $ y_0 $ and $ y_1 $\&. We integrate the equation from outside to inside\&. Since the wavefunction hs to decay to zero at infinity we choose $ y_0 = 0 $\&. Now depending on the number of knots of wavefunction we decide whether to set $ y_1 = \pm\varepsilon $\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Numerov::Numerov (\fBQuantumDefect\fP const & qd)"

.PP
Constructor\&. The constructor initializes the \fCqd\fP member and sets the initial condition for the integrator\&. It determines the outer and inner integration bounds by semiclassical and empirical arguments\&.
.PP
\fBParameters:\fP
.RS 4
\fIqd\fP Quantum defect data (parameters for the potentials) 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "std::vector< real_t > Numerov::axis () const"

.PP
x values Returns the domain on which the wavefunction was evaluated\&.
.PP
\fBReturns:\fP
.RS 4
vector with radial points 
.RE
.PP

.SS "std::vector< real_t > Numerov::integrate ()"

.PP
Perform the integration\&. This performs the integration using \fBNumerov\fP's method\&.
.PP
\fBReturns:\fP
.RS 4
vector with wavefunction amplitude 
.RE
.PP

.SS "static constexpr int Numerov::power_kernel (int power)\fC [inline]\fP, \fC [static]\fP"

.PP
Power kernel for matrix elements\&. The power kernel accounts for the fact that in \fBNumerov\fP's method the domain is square root scaled\&. This is important for the calculation of matrix elements\&.
.PP
\fBParameters:\fP
.RS 4
\fIpower\fP exponent of r 
.RE
.PP
\fBReturns:\fP
.RS 4
power kernel 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for pairinteraction from the source code\&.
